{"ast":null,"code":"var _jsxFileName = \"/home/tomek/Social_Media/CarrotStudio/CarrotHR/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport EmployeesTableManager from './EmployeesTableManager';\nimport SettingsManager from './SettingsManager';\nimport './App.scss';\n\nconst format = require('date-format'); // + ZROBIONE\n// ~ PRAWIE ZROBIONE\n// ! NASTĘPNE W PLANIE\n// [+] TODO 2 : Zapis i odczyt stanu menadżera tabeli do/z pliku\n// [+] TODO 3 : Zapis preferencji po edytowaniu pola, przypisanie polu oznaczenia preferencji\n// [+] TODO 4 : Auto generowanie planu pracy na podstawie preferencji\n// [ ] TODO 5 : Poprzenosic wszystkie kompo-funkcje do osobnych plików\n// [+] TODO 6 : Cieszyc sie że choć jeden projekt posuwa się do przodu :3\n// [~] TODO 7 : Przygotować szablon ustawień\n// [+] TODO 8 : Zablokować możliwość edycji dni wolnych od pracy\n// [ ] TODO 9 : Automatyczne generowanie dat według kwartału ustawionego w ustawieniach\n// [+] TODO 10 : Oznaczenie świąt\n// [ ] TODO 11 : Zwracanie dnia wolnego za sobotę.\n// [!] TODO 12 : Przygotowanie modal'a z wszystkimi ustawieniami\n// [ ] TODO 13 : Ujmowanie czasu pracy pracownikom z preferencjami\n// Returns the name of the day based on a date\n\n\nconst days = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\nconst getDayName = date => {\n  let dt = new Date(date);\n  return days[dt.getDay()];\n}; // Working same as Array.prototype.filter, but it's cut filtered elements from orginal array if they satisfy condition in predication\n\n\nconst select = (arr, predicate) => {\n  if (typeof predicate != \"function\") throw new TypeError();\n  var selected = arr.filter(x => {\n    return predicate.call(arr[0], x, arr);\n  });\n\n  for (const val of selected) {\n    let i = arr.indexOf(val);\n    arr.splice(i, 1);\n  }\n\n  return selected;\n}; // Chunks the array into parts\n\n\nconst chunk = (arr, size) => Array.from({\n  length: Math.ceil(arr.length / size)\n}, (v, i) => arr.slice(i * size, i * size + size)); // Copies arrays without any references\n\n\nconst duplicate = arr => {\n  return JSON.parse(JSON.stringify(arr));\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settings: {\n        free_per_day: 13,\n        // Minimalna przerwa między podjęciem następnej zmiany\n        free_per_weekfree_per_week: 35,\n        // Minimalna przerwa tygodniowa\n        free_indexs: [// Wpisy które ujmują 8h pracy\n        \"NP\", \"SP\", \"L4\", \"UW\", \"DU\", \"ZZ\", \"UO\"],\n        free_days: {\n          // Ustawienia dni tygodnia, wolne i jego rodzaj\n          sun: {\n            shift: \"N\",\n            permanent: true\n          },\n          mon: null,\n          tue: null,\n          wed: null,\n          thu: null,\n          fri: null,\n          sat: {\n            shift: \"S\",\n            permanent: false\n          }\n        },\n        min_per_shift: {\n          // Minimalna załoga pracownicza na zmianie danego dnia\n          sun: {\n            shift_1: 0,\n            shift_2: 0,\n            shift_3: 0\n          },\n          mon: {\n            shift_1: 5,\n            shift_2: 5,\n            shift_3: 0\n          },\n          tue: {\n            shift_1: 4,\n            shift_2: 4,\n            shift_3: 0\n          },\n          wed: {\n            shift_1: 5,\n            shift_2: 4,\n            shift_3: 0\n          },\n          thu: {\n            shift_1: 4,\n            shift_2: 4,\n            shift_3: 0\n          },\n          fri: {\n            shift_1: 4,\n            shift_2: 4,\n            shift_3: 0\n          },\n          sat: {\n            shift_1: 5,\n            shift_2: 4,\n            shift_3: 0\n          }\n        },\n        holidays: [// Święta ustawowo wolne\n        {\n          date: \"2020-01-01\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-01-06\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-04-11\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-04-13\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-05-01\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-05-03\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-05-31\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-06-11\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-08-15\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-11-01\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-11-11\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-12-25\",\n          shift: \"WS\"\n        }, {\n          date: \"2020-12-16\",\n          shift: \"WS\"\n        }]\n      },\n      employee_next_id: 1,\n      employees: [// {\tid: 0,\tsignature: \"Adam Nowak\",\ttime_contract: 1,\tvod: 24,\tis_super_manager: false,\tis_manager: false\t},\n      ],\n      dates: [\"2020-04-01\", \"2020-04-02\", \"2020-04-03\", \"2020-04-04\", \"2020-04-05\", \"2020-04-06\", \"2020-04-07\", \"2020-04-08\", \"2020-04-09\", \"2020-04-10\", \"2020-04-11\", \"2020-04-12\", \"2020-04-13\", \"2020-04-14\", \"2020-04-15\", \"2020-04-16\", \"2020-04-17\", \"2020-04-18\", \"2020-04-19\", \"2020-04-20\", \"2020-04-21\", \"2020-04-22\", \"2020-04-23\", \"2020-04-24\", \"2020-04-25\", \"2020-04-26\", \"2020-04-27\", \"2020-04-28\", \"2020-04-29\", \"2020-04-30\", \"2020-05-01\", \"2020-05-02\", \"2020-05-03\", \"2020-05-04\", \"2020-05-05\", \"2020-05-06\", \"2020-05-07\", \"2020-05-08\", \"2020-05-09\", \"2020-05-10\", \"2020-05-11\", \"2020-05-12\", \"2020-05-13\", \"2020-05-14\", \"2020-05-15\", \"2020-05-16\", \"2020-05-17\", \"2020-05-18\", \"2020-05-19\", \"2020-05-20\", \"2020-05-21\", \"2020-05-22\", \"2020-05-23\", \"2020-05-24\", \"2020-05-25\", \"2020-05-26\", \"2020-05-27\", \"2020-05-28\", \"2020-05-29\", \"2020-05-30\", \"2020-05-31\", \"2020-06-01\", \"2020-06-02\", \"2020-06-03\", \"2020-06-04\", \"2020-06-05\", \"2020-06-06\", \"2020-06-07\", \"2020-06-08\", \"2020-06-09\", \"2020-06-10\", \"2020-06-11\", \"2020-06-12\", \"2020-06-13\", \"2020-06-14\", \"2020-06-15\", \"2020-06-16\", \"2020-06-17\", \"2020-06-18\", \"2020-06-19\", \"2020-06-21\", \"2020-06-22\", \"2020-06-23\", \"2020-06-24\", \"2020-06-25\", \"2020-06-26\", \"2020-06-27\", \"2020-06-28\", \"2020-06-29\", \"2020-06-30\"],\n      // preferences: [],\n      schedules: [// { \temployee_id: 0, \tdate: \"03.04.2020\", \tshift: 1,\tpreference: false \t},\n      ]\n    };\n    this.onSaveClick = this.onSaveClick.bind(this);\n    this.onUploadClick = this.onUploadClick.bind(this);\n    this.onUploadChange = this.onUploadChange.bind(this);\n    this.handleOnClearClick = this.handleOnClearClick.bind(this);\n    this.handleOnClearPreferencesClick = this.handleOnClearPreferencesClick.bind(this);\n    this.handleOnNewEmployee = this.handleOnNewEmployee.bind(this); // this.handleOnPreferenceChange = this.handleOnPreferenceChange.bind(this);\n\n    this.handleOnGenerateClick = this.handleOnGenerateClick.bind(this);\n    this.handleOnScheduleChange = this.handleOnScheduleChange.bind(this);\n    this.pushSchedule = this.pushSchedule.bind(this);\n  }\n\n  handleOnClearClick() {\n    let schedules_temp = [];\n    schedules_temp = this.state.schedules.filter(schedule => {\n      return schedule.preference === true;\n    });\n    console.log(schedules_temp);\n    this.setState({\n      schedules: [...schedules_temp]\n    });\n  }\n\n  handleOnClearPreferencesClick() {\n    let schedules_temp = [...this.state.schedules];\n    schedules_temp.map(schedule => {\n      schedule.preference = false;\n    });\n    this.setState({\n      schedules: [...schedules_temp]\n    });\n  }\n\n  onSaveClick() {\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(this.state)], {\n      type: 'application/json'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = format.asString('dd-MM-yyyy hh:mm', new Date());\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  onUploadClick() {\n    this.refs.fileUploader.click();\n  }\n\n  onUploadChange(e) {\n    var reader = new FileReader();\n\n    reader.onload = (reader => {\n      return () => {\n        const json = JSON.parse(reader.result);\n        this.setState({\n          employees: json.employees,\n          employee_next_id: json.employee_next_id,\n          settings: json.settings,\n          preferences: json.preferences,\n          schedules: json.schedules\n        });\n      };\n    })(reader);\n\n    reader.readAsText(e.target.files[0]);\n  }\n\n  handleOnNewEmployee(e) {\n    if (e.key === \"Enter\") {\n      const employee = {\n        id: this.state.employee_next_id,\n        signature: e.target.value,\n        time_contract: 1,\n        vod: 24,\n        is_super_manager: false,\n        is_manager: false\n      };\n      this.setState({\n        employees: [...this.state.employees, employee],\n        employee_next_id: this.state.employee_next_id + 1\n      });\n      e.target.value = \"\";\n    }\n  }\n\n  handleOnScheduleChange(e) {\n    let schedules_temp = [...this.state.schedules];\n    schedules_temp = schedules_temp.filter(schedule => {\n      return !(schedule.employee_id == e.target.getAttribute('data-employee-id') && schedule.date == e.target.getAttribute('data-date-id'));\n    });\n\n    if (e.target.value != \"\") {\n      const schedule = {\n        employee_id: parseInt(e.target.getAttribute('data-employee-id')),\n        date: e.target.getAttribute('data-date-id'),\n        shift: e.target.value.toUpperCase(),\n        preference: true\n      };\n      this.setState({\n        schedules: [...schedules_temp, schedule]\n      });\n    } else {\n      this.setState({\n        schedules: [...schedules_temp]\n      });\n    }\n  }\n\n  getMostBored(employees) {\n    if (employees.length === 0) return;\n    let mostBored = employees[0];\n\n    for (const employee of employees) {\n      if (mostBored.time < employee.time) {\n        mostBored = employee;\n      }\n    }\n\n    return mostBored;\n  }\n\n  pushSchedule(p_schedule) {\n    let schedules_temp = [...this.state.schedules];\n    schedules_temp = schedules_temp.filter(schedule => {\n      return !(schedule.employee_id == parseInt(p_schedule.employee_id) && schedule.date == p_schedule.date);\n    });\n    this.setState({\n      schedules: [...schedules_temp, p_schedule]\n    });\n  }\n\n  pushSchedules(p_schedules) {\n    let schedules_temp = [...this.state.schedules];\n    const schedules_to_remove = p_schedules.map(p_schedule => ({\n      employee_id: parseInt(p_schedule.employee_id),\n      date: p_schedule.date\n    }));\n\n    for (const schedule_to_remove of schedules_to_remove) {\n      let schedule_reference = schedules_temp.find(schedule => {\n        return schedule.employee_id == schedule_to_remove.employee_id && schedule.date == schedule_to_remove.date;\n      });\n      let i = schedules_temp.indexOf(schedule_reference);\n      if (i >= 0) schedules_temp.splice(i, 1);\n    }\n\n    this.setState({\n      schedules: [...schedules_temp, ...p_schedules]\n    });\n  }\n\n  handleOnGenerateClick() {\n    const weeks = chunk([...this.state.dates], 7);\n    const employees = duplicate([...this.state.employees]);\n\n    let calculateTime = div => {\n      let time = 0;\n\n      for (const week of weeks) {\n        for (const date of week) {\n          let free_day = this.state.settings.free_days[getDayName(date)];\n          let holiday = this.state.settings.holidays.find(holiday => {\n            return holiday.date == date;\n          });\n          if (!free_day && !holiday) time += 1 * div;\n        }\n      }\n\n      return time;\n    };\n\n    const time = calculateTime(8);\n\n    for (const employee of employees) {\n      employee.time = time * employee.time_contract;\n    }\n\n    const schedules = this.state.schedules.filter(schedule => {\n      return schedule.preference === true;\n    });\n    ; //this.state.schedules.map(schedule => { return schedule.preference === true }) ;\n\n    const week_free_days_state = [];\n\n    for (const week of weeks) {\n      for (const employee of employees) {\n        employee.free_days = duplicate({ ...this.state.settings.free_days\n        });\n        let state = week_free_days_state.find(state => {\n          return state.employee_id == employee.id;\n        });\n\n        for (const key in employee.free_days) {\n          if (employee.free_days[key]) {\n            employee.free_days[key].left = 1;\n            if (state && state[key]) employee.free_days[key].left += state[key];\n          }\n        }\n      }\n\n      week_free_days_state.length = 0;\n\n      for (const date of week) {\n        let free_day = this.state.settings.free_days[getDayName(date)];\n\n        if (free_day && free_day.permanent) {\n          for (const employee of employees) {\n            employee.free_days[getDayName(date)].left -= 1;\n            schedules.push({\n              employee_id: employee.id,\n              date: date,\n              shift: free_day.shift,\n              preference: false\n            });\n          }\n\n          continue;\n        }\n\n        let holiday = this.state.settings.holidays.find(holiday => {\n          return holiday.date == date;\n        });\n\n        if (holiday) {\n          for (const employee of employees) {\n            schedules.push({\n              employee_id: employee.id,\n              date: date,\n              shift: holiday.shift,\n              preference: false\n            });\n          }\n\n          continue;\n        }\n\n        const preferences = schedules.filter(schedule => {\n          return schedule.date == date && schedule.preference === true;\n        });\n        const employees_with_preferences_id = preferences.map(preference => parseInt(preference.employee_id));\n        const employees_with_preferences = employees.filter(employee => {\n          return employees_with_preferences_id.includes(employee.id);\n        });\n        const employees_no_preferences = employees.filter(employee => {\n          return !employees_with_preferences_id.includes(employee.id) && employee.time > 0;\n        });\n        const employees_to_free = employees.filter(employee => {\n          return !employees_with_preferences_id.includes(employee.id) && employee.time <= 0;\n        });\n        const schedules_shift_1 = preferences.filter(preference => {\n          return preference.shift == 1;\n        }).map(preference => ({\n          employee_id: preference.employee_id,\n          date: date,\n          shift: 1,\n          preference: true\n        }));\n        const schedules_shift_2 = preferences.filter(preference => {\n          return preference.shift == 2;\n        }).map(preference => ({\n          employee_id: preference.employee_id,\n          date: date,\n          shift: 2,\n          preference: true\n        }));\n\n        for (const schedule of schedules_shift_1) {\n          const employee = employees.find(employee => {\n            return employee.id == schedule.employee_id;\n          });\n          employee.time -= 9;\n        }\n\n        for (const schedule of schedules_shift_2) {\n          const employee = employees.find(employee => {\n            return employee.id == schedule.employee_id;\n          });\n          employee.time -= 9;\n        }\n\n        while (schedules_shift_1.length < this.state.settings.min_per_shift[getDayName(date)].shift_1) {\n          if (employees_no_preferences.length === 0) break;\n          const employee = this.getMostBored(employees_no_preferences);\n          employee.time -= 9;\n          let i = employees_no_preferences.indexOf(employee);\n          employees_no_preferences.splice(i, 1);\n          let schedule = {\n            employee_id: employee.id,\n            date: date,\n            shift: 1,\n            preference: false\n          };\n          schedules_shift_1.push(schedule);\n        }\n\n        while (schedules_shift_2.length < this.state.settings.min_per_shift[getDayName(date)].shift_2) {\n          if (employees_no_preferences.length === 0) break;\n          const employee = this.getMostBored(employees_no_preferences);\n          employee.time -= 9;\n          let i = employees_no_preferences.indexOf(employee);\n          employees_no_preferences.splice(i, 1);\n          let schedule = {\n            employee_id: employee.id,\n            date: date,\n            shift: 2,\n            preference: false\n          };\n          schedules_shift_2.push(schedule);\n        }\n\n        for (const schedule of schedules_shift_1) {\n          schedules.push(schedule);\n        }\n\n        for (const schedule of schedules_shift_2) {\n          schedules.push(schedule);\n        }\n\n        for (const employee of employees_no_preferences) {\n          let shift = \"W\";\n\n          for (const key of [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"]) {\n            if (!employee.free_days[key]) continue;\n\n            if (this.state.settings.free_days[key].permanent === true && employee.free_days[key].left > 1 || this.state.settings.free_days[key].permanent === false && employee.free_days[key].left > 0) {\n              shift = employee.free_days[key].shift;\n              employee.free_days[key].left -= 1;\n              break;\n            }\n          }\n\n          schedules.push({\n            employee_id: employee.id,\n            date: date,\n            shift: shift,\n            preference: false\n          });\n        }\n\n        for (const employee of employees_to_free) {\n          schedules.push({\n            employee_id: employee.id,\n            date: date,\n            shift: \"W\",\n            preference: false\n          });\n        }\n      }\n\n      for (const employee of employees) {\n        let state = {\n          employee_id: employee.id,\n          sun: employee.free_days.sun ? employee.free_days.sun.left : 0,\n          mon: employee.free_days.mon ? employee.free_days.mon.left : 0,\n          tue: employee.free_days.tue ? employee.free_days.tue.left : 0,\n          wed: employee.free_days.wed ? employee.free_days.wed.left : 0,\n          thu: employee.free_days.thu ? employee.free_days.thu.left : 0,\n          fri: employee.free_days.fri ? employee.free_days.fri.left : 0,\n          sat: employee.free_days.sat ? employee.free_days.sat.left : 0\n        };\n        week_free_days_state.push(state);\n      }\n    }\n\n    for (const employee of employees) {\n      for (const key of [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"]) {\n        if (!employee.free_days[key]) continue;\n\n        while (employee.free_days[key].left > 0) {\n          let schedule = schedules.find(schedule => {\n            return schedule.employee_id == employee.id && schedule.shift === \"W\";\n          });\n          if (!schedule) break;\n          schedule.shift = employee.free_days[key].shift;\n          employee.free_days[key].left--;\n        }\n      }\n\n      while (employee.time > 0) {\n        let schedule = schedules.find(schedule => {\n          return schedule.employee_id == employee.id && schedule.shift === \"W\" && schedule.preference === false;\n        });\n        if (!schedule) break;\n        schedule.shift = employee.id % 2 == 0 ? 1 : 2;\n        employee.time -= 9;\n      }\n    }\n\n    this.pushSchedules(schedules);\n    console.log(employees);\n  } // <button className=\"btn btn-outline-primary font-weight-bold mr-2\" type=\"button\">Pokaż preferencje</button>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar navbar-light bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(SettingsManager, {\n      settings: this.state.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-dark font-weight-bold mr-2\",\n      type: \"button\",\n      onClick: this.onSaveClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 7\n      }\n    }, \"Zapisz\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-dark font-weight-bold mr-4\",\n      type: \"button\",\n      onClick: this.onUploadClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 7\n      }\n    }, \"Wczytaj\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-success font-weight-bold mr-2\",\n      type: \"button\",\n      onClick: this.handleOnGenerateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 10\n      }\n    }, \"Generuj plan pracy\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-danger font-weight-bold mr-2\",\n      type: \"button\",\n      onClick: this.handleOnClearClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 7\n      }\n    }, \"Wyczy\\u015B\\u0107 plan pracy\"), \"// \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-danger font-weight-bold mr-4\",\n      type: \"button\",\n      onClick: this.handleOnClearPreferencesClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 10\n      }\n    }, \"Usu\\u0144 preferencje\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-dark font-weight-bold mr-2\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 7\n      }\n    }, \"Cofnij\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-dark font-weight-bold mr-2\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 10\n      }\n    }, \"Przywr\\xF3\\u0107\"), /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"fileUploader\",\n      className: \"d-none\",\n      type: \"file\",\n      onChange: this.onUploadChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(EmployeesTableManager, {\n      settings: this.state.settings,\n      employees: this.state.employees,\n      dates: this.state.dates,\n      schedules: this.state.schedules,\n      onNewEmployee: this.handleOnNewEmployee,\n      onScheduleChange: this.handleOnScheduleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/tomek/Social_Media/CarrotStudio/CarrotHR/src/Components/App.js"],"names":["React","Component","EmployeesTableManager","SettingsManager","format","require","days","getDayName","date","dt","Date","getDay","select","arr","predicate","TypeError","selected","filter","x","call","val","i","indexOf","splice","chunk","size","Array","from","length","Math","ceil","v","slice","duplicate","JSON","parse","stringify","App","constructor","props","state","settings","free_per_day","free_per_weekfree_per_week","free_indexs","free_days","sun","shift","permanent","mon","tue","wed","thu","fri","sat","min_per_shift","shift_1","shift_2","shift_3","holidays","employee_next_id","employees","dates","schedules","onSaveClick","bind","onUploadClick","onUploadChange","handleOnClearClick","handleOnClearPreferencesClick","handleOnNewEmployee","handleOnGenerateClick","handleOnScheduleChange","pushSchedule","schedules_temp","schedule","preference","console","log","setState","map","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","asString","body","appendChild","click","refs","fileUploader","e","reader","FileReader","onload","json","result","preferences","readAsText","target","files","key","employee","id","signature","value","time_contract","vod","is_super_manager","is_manager","employee_id","getAttribute","parseInt","toUpperCase","getMostBored","mostBored","time","p_schedule","pushSchedules","p_schedules","schedules_to_remove","schedule_to_remove","schedule_reference","find","weeks","calculateTime","div","week","free_day","holiday","week_free_days_state","left","push","employees_with_preferences_id","employees_with_preferences","includes","employees_no_preferences","employees_to_free","schedules_shift_1","schedules_shift_2","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport EmployeesTableManager from './EmployeesTableManager';\nimport SettingsManager from './SettingsManager';\nimport './App.scss';\n\nconst format = require('date-format');\n\n// + ZROBIONE\n// ~ PRAWIE ZROBIONE\n// ! NASTĘPNE W PLANIE\n\n// [+] TODO 2 : Zapis i odczyt stanu menadżera tabeli do/z pliku\n// [+] TODO 3 : Zapis preferencji po edytowaniu pola, przypisanie polu oznaczenia preferencji\n// [+] TODO 4 : Auto generowanie planu pracy na podstawie preferencji\n// [ ] TODO 5 : Poprzenosic wszystkie kompo-funkcje do osobnych plików\n// [+] TODO 6 : Cieszyc sie że choć jeden projekt posuwa się do przodu :3\n// [~] TODO 7 : Przygotować szablon ustawień\n// [+] TODO 8 : Zablokować możliwość edycji dni wolnych od pracy\n// [ ] TODO 9 : Automatyczne generowanie dat według kwartału ustawionego w ustawieniach\n// [+] TODO 10 : Oznaczenie świąt\n// [ ] TODO 11 : Zwracanie dnia wolnego za sobotę.\n// [!] TODO 12 : Przygotowanie modal'a z wszystkimi ustawieniami\n// [ ] TODO 13 : Ujmowanie czasu pracy pracownikom z preferencjami\n\n\n// Returns the name of the day based on a date\nconst days = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\nconst getDayName = (date) => {\n\tlet dt = new Date(date);\n\treturn days[dt.getDay()];\n}\n\n// Working same as Array.prototype.filter, but it's cut filtered elements from orginal array if they satisfy condition in predication\nconst select = (arr, predicate) => {\n    if (typeof predicate != \"function\")\n      \tthrow new TypeError();\n\n    var selected = arr.filter( x => {\n\t\treturn (predicate.call(arr[0], x, arr))\n\t})\n\n\tfor ( const val of selected ) {\n\t\tlet i = arr.indexOf( val )\n\t\tarr.splice(i,1)\n\t}\n\n    return selected;\n};\n\n// Chunks the array into parts\nconst chunk = (arr, size) => Array.from( { length: Math.ceil(arr.length / size) }, (v, i) =>\n\tarr.slice(i * size, i * size + size)\n);\n\n// Copies arrays without any references\nconst duplicate = (arr) => { return JSON.parse(JSON.stringify(arr)) };\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsettings: {\n\t\t\t\tfree_per_day: 13,\t// Minimalna przerwa między podjęciem następnej zmiany\n\t\t\t\tfree_per_weekfree_per_week: 35, // Minimalna przerwa tygodniowa\n\t\t\t\tfree_indexs: [ // Wpisy które ujmują 8h pracy\n\t\t\t\t\t\"NP\", \"SP\", \"L4\", \"UW\", \"DU\", \"ZZ\", \"UO\"\n\t\t\t\t],\n\t\t\t\tfree_days: {  // Ustawienia dni tygodnia, wolne i jego rodzaj\n\t\t\t\t\tsun: {\n\t\t\t\t\t\tshift: \"N\",\n\t\t\t\t\t\tpermanent: true,\n\t\t\t\t\t},\n\t\t\t\t\tmon: null,\n\t\t\t\t\ttue: null,\n\t\t\t\t\twed: null,\n\t\t\t\t\tthu: null,\n\t\t\t\t\tfri: null,\n\t\t\t\t\tsat: {\n\t\t\t\t\t\tshift: \"S\",\n\t\t\t\t\t\tpermanent: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmin_per_shift: { // Minimalna załoga pracownicza na zmianie danego dnia\n\t\t\t\t\tsun: {\n\t\t\t\t\t\tshift_1: 0,\n\t\t\t\t\t\tshift_2: 0,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t\tmon: {\n\t\t\t\t\t\tshift_1: 5,\n\t\t\t\t\t\tshift_2: 5,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t\ttue: {\n\t\t\t\t\t\tshift_1: 4,\n\t\t\t\t\t\tshift_2: 4,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t\twed: {\n\t\t\t\t\t\tshift_1: 5,\n\t\t\t\t\t\tshift_2: 4,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t\tthu: {\n\t\t\t\t\t\tshift_1: 4,\n\t\t\t\t\t\tshift_2: 4,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t\tfri: {\n\t\t\t\t\t\tshift_1: 4,\n\t\t\t\t\t\tshift_2: 4,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t\tsat: {\n\t\t\t\t\t\tshift_1: 5,\n\t\t\t\t\t\tshift_2: 4,\n\t\t\t\t\t\tshift_3: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tholidays: [ // Święta ustawowo wolne\n\t\t\t\t\t{ \tdate: \"2020-01-01\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-01-06\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-04-11\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-04-13\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-05-01\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-05-03\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-05-31\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-06-11\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-08-15\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-11-01\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-11-11\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-12-25\", \tshift: \"WS\" \t},\n\t\t\t\t\t{ \tdate: \"2020-12-16\", \tshift: \"WS\" \t},\n\t\t\t\t],\n\t\t\t},\n\t\t\temployee_next_id: 1,\n\t\t\temployees: [\n\t\t\t\t// {\tid: 0,\tsignature: \"Adam Nowak\",\ttime_contract: 1,\tvod: 24,\tis_super_manager: false,\tis_manager: false\t},\n\t\t\t],\n\t\t\tdates: [\n\t\t\t\t\"2020-04-01\", \"2020-04-02\", \"2020-04-03\", \"2020-04-04\", \"2020-04-05\", \"2020-04-06\", \"2020-04-07\",\n\t\t\t\t\"2020-04-08\", \"2020-04-09\", \"2020-04-10\", \"2020-04-11\", \"2020-04-12\", \"2020-04-13\", \"2020-04-14\",\n\t\t\t\t\"2020-04-15\", \"2020-04-16\", \"2020-04-17\", \"2020-04-18\", \"2020-04-19\", \"2020-04-20\", \"2020-04-21\",\n\t\t\t\t\"2020-04-22\", \"2020-04-23\", \"2020-04-24\", \"2020-04-25\", \"2020-04-26\", \"2020-04-27\", \"2020-04-28\",\n\t\t\t\t\"2020-04-29\", \"2020-04-30\", \"2020-05-01\", \"2020-05-02\", \"2020-05-03\", \"2020-05-04\", \"2020-05-05\",\n\t\t\t \t\"2020-05-06\", \"2020-05-07\", \"2020-05-08\", \"2020-05-09\", \"2020-05-10\", \"2020-05-11\", \"2020-05-12\",\n\t\t\t \t\"2020-05-13\", \"2020-05-14\", \"2020-05-15\", \"2020-05-16\", \"2020-05-17\", \"2020-05-18\", \"2020-05-19\",\n\t\t\t \t\"2020-05-20\", \"2020-05-21\", \"2020-05-22\", \"2020-05-23\", \"2020-05-24\", \"2020-05-25\", \"2020-05-26\",\n\t\t\t\t\"2020-05-27\", \"2020-05-28\", \"2020-05-29\", \"2020-05-30\", \"2020-05-31\", \"2020-06-01\", \"2020-06-02\",\n\t\t\t\t\"2020-06-03\", \"2020-06-04\", \"2020-06-05\", \"2020-06-06\", \"2020-06-07\", \"2020-06-08\", \"2020-06-09\",\n\t\t\t\t\"2020-06-10\", \"2020-06-11\", \"2020-06-12\", \"2020-06-13\", \"2020-06-14\", \"2020-06-15\", \"2020-06-16\",\n\t\t\t\t\"2020-06-17\", \"2020-06-18\", \"2020-06-19\", \"2020-06-21\", \"2020-06-22\", \"2020-06-23\", \"2020-06-24\",\n\t\t\t\t\"2020-06-25\", \"2020-06-26\", \"2020-06-27\", \"2020-06-28\", \"2020-06-29\", \"2020-06-30\",\n\t\t\t],\n\t\t\t// preferences: [],\n\t\t\tschedules: [\n\t\t\t\t// { \temployee_id: 0, \tdate: \"03.04.2020\", \tshift: 1,\tpreference: false \t},\n\t\t\t]\n\t\t}\n\n\t\tthis.onSaveClick = this.onSaveClick.bind(this);\n\t\tthis.onUploadClick = this.onUploadClick.bind(this);\n\t\tthis.onUploadChange = this.onUploadChange.bind(this);\n\t\tthis.handleOnClearClick = this.handleOnClearClick.bind(this);\n\t\tthis.handleOnClearPreferencesClick = this.handleOnClearPreferencesClick.bind(this);\n\t\tthis.handleOnNewEmployee = this.handleOnNewEmployee.bind(this);\n\t\t// this.handleOnPreferenceChange = this.handleOnPreferenceChange.bind(this);\n\t\tthis.handleOnGenerateClick = this.handleOnGenerateClick.bind(this);\n\t\tthis.handleOnScheduleChange = this.handleOnScheduleChange.bind(this);\n\t\tthis.pushSchedule = this.pushSchedule.bind(this);\n\t}\n\n\thandleOnClearClick() {\n\t\tlet schedules_temp = [ ];\n\t\tschedules_temp = this.state.schedules.filter(schedule => { return schedule.preference === true });\n\t\tconsole.log(schedules_temp)\n\t\tthis.setState( { schedules: [ ...schedules_temp ]} )\n\t}\n\n\thandleOnClearPreferencesClick() {\n\t\tlet schedules_temp = [ ...this.state.schedules ];\n\t\tschedules_temp.map(schedule => { schedule.preference = false });\n\t\tthis.setState( { schedules: [ ...schedules_temp ]} )\n\t}\n\n\tonSaveClick() {\n\t\tconst element = document.createElement(\"a\");\n\t\tconst file = new Blob([JSON.stringify(this.state)], {type: 'application/json'});\n\t\telement.href = URL.createObjectURL(file);\n\t\telement.download = format.asString('dd-MM-yyyy hh:mm', new Date());\n\t\tdocument.body.appendChild(element);\n\t\telement.click();\n\t}\n\n\tonUploadClick() {\n\t\tthis.refs.fileUploader.click();\n\t}\n\n\tonUploadChange(e) {\n\t\tvar reader = new FileReader();\n        reader.onload = ((reader) => {\n            return () => {\n                const json = JSON.parse(reader.result);\n\t\t\t\tthis.setState( {\n\t\t\t\t\temployees: json.employees,\n\t\t\t\t\temployee_next_id: json.employee_next_id,\n\t\t\t\t\tsettings: json.settings,\n\t\t\t\t\tpreferences: json.preferences,\n\t\t\t\t\tschedules: json.schedules,\n\t\t\t\t} );\n            }\n        })(reader);\n\n        reader.readAsText(e.target.files[0]);\n\t}\n\n\thandleOnNewEmployee(e) {\n\t\tif (e.key === \"Enter\") {\n\t\t\tconst employee = { id: this.state.employee_next_id,\tsignature: e.target.value,\ttime_contract: 1,\tvod: 24, is_super_manager: false, is_manager: false }\n\t\t\tthis.setState( { employees: [ ...this.state.employees, employee], employee_next_id: this.state.employee_next_id + 1 } );\n\t\t\te.target.value = \"\";\n\t\t}\n\t}\n\n\thandleOnScheduleChange(e) {\n\t\tlet schedules_temp = [ ...this.state.schedules ]\n\t\tschedules_temp = schedules_temp.filter(schedule => { return !(\n\t\t\tschedule.employee_id == e.target.getAttribute('data-employee-id') &&\n\t\t\tschedule.date == e.target.getAttribute('data-date-id')\n\t\t)});\n\n\t\tif ( e.target.value != \"\" ) {\n\t\t\tconst schedule = {\n\t\t\t\temployee_id: parseInt( e.target.getAttribute('data-employee-id') ),\n\t\t\t\tdate: e.target.getAttribute('data-date-id'),\n\t\t\t\tshift: e.target.value.toUpperCase(),\n\t\t\t\tpreference: true,\n\t\t\t}\n\t\t\tthis.setState( { schedules: [ ...schedules_temp, schedule ] } );\n\t\t} else {\n\t\t\tthis.setState( { schedules: [ ...schedules_temp ] } );\n\t\t}\n\t}\n\n\tgetMostBored( employees ) {\n\t\tif ( employees.length === 0 ) return;\n\t\tlet mostBored = employees[0];\n\t\tfor ( const employee of employees ) {\n\t\t\tif ( mostBored.time < employee.time ) {\n\t\t\t\tmostBored = employee;\n\t\t\t}\n\t\t}\n\t\treturn mostBored\n\t}\n\n\tpushSchedule( p_schedule ) {\n\t\tlet schedules_temp = [ ...this.state.schedules ]\n\t\tschedules_temp = schedules_temp.filter(schedule => { return !(\n\t\t\tschedule.employee_id == parseInt(p_schedule.employee_id) &&\n\t\t\tschedule.date == p_schedule.date\n\t\t)});\n\n\t\tthis.setState( { schedules: [ ...schedules_temp, p_schedule ] } );\n\t}\n\n\tpushSchedules( p_schedules ) {\n\t\tlet schedules_temp = [ ...this.state.schedules ]\n\n\t\tconst schedules_to_remove = p_schedules.map(p_schedule => ({ employee_id: parseInt(p_schedule.employee_id), date: p_schedule.date }) )\n\t\tfor ( const schedule_to_remove of schedules_to_remove ) {\n\t\t\tlet schedule_reference = schedules_temp.find(schedule => { return ( schedule.employee_id == schedule_to_remove.employee_id && schedule.date == schedule_to_remove.date) })\n\t\t\tlet i = schedules_temp.indexOf(schedule_reference)\n\t\t\tif( i >= 0 ) schedules_temp.splice(i,1)\n\t\t}\n\n\t\tthis.setState( { schedules: [ ...schedules_temp, ...p_schedules ] } );\n\t}\n\n\thandleOnGenerateClick() {\n\t\tconst weeks = chunk([...this.state.dates], 7);\n\n\t\tconst employees = duplicate( [...this.state.employees] );\n\n\t\tlet calculateTime = (div) => {\n\t\t\tlet time = 0;\n\t\t\tfor ( const week of weeks ) {\n\t\t\t\tfor ( const date of week ) {\n\t\t\t\t\tlet free_day = this.state.settings.free_days[ getDayName(date) ];\n\t\t\t\t\tlet holiday = this.state.settings.holidays.find( holiday => { return ( holiday.date == date ) } )\n\t\t\t\t\tif ( !free_day && !holiday ) time += 1 * div;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn time;\n\t\t}\n\t\tconst time = calculateTime(8)\n\n\t\tfor ( const employee of employees ) {\n\t\t\temployee.time = time * employee.time_contract;\n\t\t}\n\n\t\tconst schedules = this.state.schedules.filter(schedule => { return ( schedule.preference === true ) } );; //this.state.schedules.map(schedule => { return schedule.preference === true }) ;\n\t\tconst week_free_days_state = []\n\t\tfor ( const week of weeks ) {\n\n\t\t\tfor ( const employee of employees ) {\n\t\t\t\temployee.free_days = duplicate( {...this.state.settings.free_days} );\n\t\t\t\tlet state = week_free_days_state.find(state => { return state.employee_id == employee.id })\n\t\t\t\tfor ( const key in employee.free_days ) {\n\t\t\t\t\tif ( employee.free_days[key] ) {\n\t\t\t\t\t\temployee.free_days[key].left = 1;\n\t\t\t\t\t\tif ( state && state[key] ) employee.free_days[key].left += state[key]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tweek_free_days_state.length = 0;\n\n\t\t\tfor ( const date of week ) {\n\t\t\t\tlet free_day = this.state.settings.free_days[getDayName(date)];\n\t\t\t\tif ( free_day && free_day.permanent ) {\n\t\t\t\t\tfor ( const employee of employees ) {\n\t\t\t\t\t\temployee.free_days[ getDayName(date) ].left -= 1;\n\t\t\t\t\t\tschedules.push( { employee_id: employee.id, date: date, shift: free_day.shift, preference: false } );\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet holiday = this.state.settings.holidays.find( holiday => { return ( holiday.date == date ) });\n\t\t\t\tif ( holiday ) {\n\t\t\t\t\tfor ( const employee of employees ) {\n\t\t\t\t\t\tschedules.push( { employee_id: employee.id, date: date, shift: holiday.shift, preference: false } );\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst preferences = schedules.filter(schedule => { return ( schedule.date == date && schedule.preference === true ) } );\n\n\t\t\t\tconst employees_with_preferences_id = preferences.map(preference => parseInt(preference.employee_id));\n\n\t\t\t\tconst employees_with_preferences =  employees.filter(employee => { return ( employees_with_preferences_id.includes(employee.id) ) });\n\t\t\t\tconst employees_no_preferences = employees.filter(employee => { return !( employees_with_preferences_id.includes(employee.id) ) && employee.time > 0 })\n\t\t\t\tconst employees_to_free = employees.filter(employee => { return !( employees_with_preferences_id.includes(employee.id) ) && employee.time <= 0 })\n\n\t\t\t\tconst schedules_shift_1 = preferences.filter(preference => { return ( preference.shift == 1 ) } ).map(preference => ({ employee_id: preference.employee_id, date: date, shift: 1, preference: true }) );\n\t\t\t\tconst schedules_shift_2 = preferences.filter(preference => { return ( preference.shift == 2 ) } ).map(preference => ({ employee_id: preference.employee_id, date: date, shift: 2, preference: true }) );\n\n\t\t\t\tfor ( const schedule of schedules_shift_1 ) {\n\t\t\t\t\tconst employee = employees.find(employee => { return ( employee.id == schedule.employee_id) })\n\t\t\t\t\temployee.time -= 9\n\t\t\t\t}\n\n\t\t\t\tfor ( const schedule of schedules_shift_2 ) {\n\t\t\t\t\tconst employee = employees.find(employee => { return ( employee.id == schedule.employee_id) })\n\t\t\t\t\temployee.time -= 9\n\t\t\t\t}\n\n\t\t\t\twhile ( schedules_shift_1.length < this.state.settings.min_per_shift[getDayName(date)].shift_1 ) {\n\t\t\t\t\tif ( employees_no_preferences.length === 0 ) break;\n\t\t\t\t\tconst employee = this.getMostBored( employees_no_preferences );\n\t\t\t\t\temployee.time -= 9;\n\n\t\t\t\t\tlet i = employees_no_preferences.indexOf( employee );\n\t\t\t\t\temployees_no_preferences.splice(i,1)\n\n\t\t\t\t\tlet schedule = { employee_id: employee.id, date: date, shift: 1, preference: false}\n\t\t\t\t\tschedules_shift_1.push( schedule );\n\t\t\t\t}\n\n\t\t\t\twhile ( schedules_shift_2.length < this.state.settings.min_per_shift[getDayName(date)].shift_2 ) {\n\t\t\t\t\tif ( employees_no_preferences.length === 0 ) break;\n\t\t\t\t\tconst employee = this.getMostBored( employees_no_preferences );\n\t\t\t\t\temployee.time -= 9;\n\n\t\t\t\t\tlet i = employees_no_preferences.indexOf( employee );\n\t\t\t\t\temployees_no_preferences.splice(i,1)\n\n\t\t\t\t\tlet schedule = { employee_id: employee.id, date: date, shift: 2, preference: false}\n\t\t\t\t\tschedules_shift_2.push( schedule );\n\t\t\t\t}\n\n\t\t\t\tfor ( const schedule of schedules_shift_1 ) {\n\t\t\t\t\tschedules.push( schedule );\n\t\t\t\t}\n\n\t\t\t\tfor ( const schedule of schedules_shift_2 ) {\n\t\t\t\t\tschedules.push( schedule );\n\t\t\t\t}\n\n\t\t\t\tfor ( const employee of employees_no_preferences ) {\n\t\t\t\t\tlet shift = \"W\";\n\t\t\t\t\tfor ( const key of [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"] ) {\n\t\t\t\t\t\tif ( !employee.free_days[key] ) continue\n\t\t\t\t\t\tif ( ( this.state.settings.free_days[key].permanent === true && employee.free_days[key].left > 1 ) ||\n\t\t\t\t\t\t\t ( this.state.settings.free_days[key].permanent === false && employee.free_days[key].left > 0 ) ) {\n\t\t\t\t\t\t\tshift = employee.free_days[key].shift;\n\t\t\t\t\t\t\temployee.free_days[key].left -= 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tschedules.push( { employee_id: employee.id, date: date, shift: shift, preference: false } );\n\t\t\t\t}\n\n\t\t\t\tfor ( const employee of employees_to_free ) {\n\t\t\t\t\tschedules.push( { employee_id: employee.id, date: date, shift: \"W\", preference: false } );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( const employee of employees ) {\n\t\t\t\tlet state = {\n\t\t\t\t\temployee_id: employee.id,\n\t\t\t\t\tsun: (employee.free_days.sun) ? employee.free_days.sun.left : 0,\n\t\t\t\t\tmon: (employee.free_days.mon) ? employee.free_days.mon.left : 0,\n\t\t\t\t\ttue: (employee.free_days.tue) ? employee.free_days.tue.left : 0,\n\t\t\t\t\twed: (employee.free_days.wed) ? employee.free_days.wed.left : 0,\n\t\t\t\t\tthu: (employee.free_days.thu) ? employee.free_days.thu.left : 0,\n\t\t\t\t\tfri: (employee.free_days.fri) ? employee.free_days.fri.left : 0,\n\t\t\t\t\tsat: (employee.free_days.sat) ? employee.free_days.sat.left : 0,\n\t\t\t\t}\n\t\t\t\tweek_free_days_state.push(state)\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const employee of employees ) {\n\t\t\tfor ( const key of [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"] ) {\n\t\t\t\tif ( !employee.free_days[key] ) continue\n\t\t\t\twhile ( employee.free_days[key].left > 0 ) {\n\t\t\t\t\tlet schedule = schedules.find(schedule => { return ( schedule.employee_id == employee.id && schedule.shift === \"W\" ) } )\n\t\t\t\t\tif ( !schedule ) break;\n\n\t\t\t\t\tschedule.shift = employee.free_days[key].shift;\n\t\t\t\t\temployee.free_days[key].left--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile ( employee.time > 0 ) {\n\t\t\t\tlet schedule = schedules.find(schedule => { return ( schedule.employee_id == employee.id && schedule.shift === \"W\" && schedule.preference === false ) } );\n\t\t\t\tif ( !schedule ) break;\n\n\t\t\t\tschedule.shift = ( employee.id % 2 == 0) ? 1 : 2;\n\t\t\t\temployee.time -= 9;\n\t\t\t}\n\t\t}\n\n\t\tthis.pushSchedules(schedules)\n\n\t\tconsole.log( employees )\n\t}\n\n\t// <button className=\"btn btn-outline-primary font-weight-bold mr-2\" type=\"button\">Pokaż preferencje</button>\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<nav className=\"navbar navbar-light bg-light\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<SettingsManager settings={ this.state.settings } />\n\t\t\t\t\t\t<button className=\"btn btn-outline-dark font-weight-bold mr-2\" type=\"button\" onClick={ this.onSaveClick }>Zapisz</button>\n\t\t\t\t\t\t<button className=\"btn btn-outline-dark font-weight-bold mr-4\" type=\"button\" onClick={ this.onUploadClick }>Wczytaj</button>\n\t\t\t\t    \t<button className=\"btn btn-outline-success font-weight-bold mr-2\" type=\"button\" onClick={ this.handleOnGenerateClick }>Generuj plan pracy</button>\n\t\t\t\t\t\t<button className=\"btn btn-outline-danger font-weight-bold mr-2\" type=\"button\" onClick={ this.handleOnClearClick }>Wyczyść plan pracy</button>\n\t\t\t\t\t\t// <button className=\"btn btn-outline-danger font-weight-bold mr-4\" type=\"button\" onClick={ this.handleOnClearPreferencesClick }>Usuń preferencje</button>\n\t\t\t\t\t\t<button className=\"btn btn-outline-dark font-weight-bold mr-2\" type=\"button\">Cofnij</button>\n\t\t\t\t    \t<button className=\"btn btn-outline-dark font-weight-bold mr-2\" type=\"button\">Przywróć</button>\n\t\t\t\t\t\t<input ref=\"fileUploader\" className=\"d-none\" type=\"file\" onChange={ this.onUploadChange }/>\n\t\t\t\t\t</form>\n\t\t\t\t</nav>\n\t\t\t\t<EmployeesTableManager settings={ this.state.settings } employees={this.state.employees} dates={this.state.dates} schedules={this.state.schedules} onNewEmployee={this.handleOnNewEmployee} onScheduleChange={this.handleOnScheduleChange}/>\n\t\t\t</>\n\t    );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}