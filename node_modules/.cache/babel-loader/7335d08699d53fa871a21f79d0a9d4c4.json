{"ast":null,"code":"var _jsxFileName = \"/home/tomek/projects/carrot-hr/src/index.js\";\nimport React, { createStore } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './App'; // import store from './store';\n// import { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport { connect, Provider } from 'react-redux';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state,\n        counter: state.counter + 1\n      };\n\n    case 'DECREMENT':\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, {\n  counter: 0\n});\n\nclass Counter extends React.Component {\n  render() {\n    const {\n      counter,\n      onDecrement,\n      onIncrement\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, counter), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onDecrement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onIncrement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"+\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    counter: state.counter\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrement: () => dispatch({\n      type: 'INCREMENT'\n    }),\n    onDecrement: () => dispatch({\n      type: 'DECREMENT'\n    })\n  };\n};\n\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/tomek/projects/carrot-hr/src/index.js"],"names":["React","createStore","ReactDOM","App","serviceWorker","connect","Provider","reducer","state","action","type","counter","store","Counter","Component","render","onDecrement","onIncrement","props","mapStateToProps","mapDispatchToProps","dispatch","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP;AAEA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;AACA;;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,GAAgB;AAArC,OAAP;;AACF,SAAK,WAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYG,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,GAAgB;AAArC,OAAP;;AACF;AACE,aAAOH,KAAP;AANJ;AAQD,CATD;;AAWA,MAAMI,KAAK,GAAGX,WAAW,CAACM,OAAD,EAAU;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAV,CAAzB;;AAEA,MAAME,OAAN,SAAsBb,KAAK,CAACc,SAA5B,CAAsC;AACpCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,OAAF;AAAWK,MAAAA,WAAX;AAAwBC,MAAAA;AAAxB,QAAwC,KAAKC,KAAnD;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMP,OAAN,CADF,eAEE;AAAQ,MAAA,OAAO,EAAEK,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,eAGE;AAAQ,MAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHF,CADF;AAOD;;AAXmC;;AActC,MAAME,eAAe,GAAIX,KAAD,IAAW;AACjC,SAAO;AAAEG,IAAAA,OAAO,EAAEH,KAAK,CAACG;AAAjB,GAAP;AACD,CAFD;;AAGA,MAAMS,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLJ,IAAAA,WAAW,EAAE,MAAMI,QAAQ,CAAC;AAAEX,MAAAA,IAAI,EAAE;AAAR,KAAD,CADtB;AAELM,IAAAA,WAAW,EAAE,MAAMK,QAAQ,CAAC;AAAEX,MAAAA,IAAI,EAAE;AAAR,KAAD;AAFtB,GAAP;AAID,CALD;;AAOAP,GAAG,GAAGE,OAAO,CAACc,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CjB,GAA7C,CAAN;AAEAD,QAAQ,CAACa,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,EAMEU,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACAnB,aAAa,CAACoB,UAAd","sourcesContent":["import React, { createStore } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.scss';\r\n\r\nimport App from './App';\r\n\r\n// import store from './store';\r\n// import { Provider } from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { connect, Provider } from 'react-redux';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { ...state, counter: state.counter + 1 };\r\n    case 'DECREMENT':\r\n      return { ...state, counter: state.counter - 1 };\r\n    default:\r\n      return state;\r\n    }\r\n};\r\n\r\nconst store = createStore(reducer, { counter: 0 });\r\n\r\nclass Counter extends React.Component {\r\n  render() {\r\n    const { counter, onDecrement, onIncrement } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div>{counter}</div>\r\n        <button onClick={onDecrement}>-</button>\r\n        <button onClick={onIncrement}>+</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { counter: state.counter };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onIncrement: () => dispatch({ type: 'INCREMENT' }),\r\n    onDecrement: () => dispatch({ type: 'DECREMENT' })\r\n  }\r\n};\r\n\r\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}